// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: problem.proto

#pragma warning disable CS1591, CS0612, CS3021, IDE1006
namespace Problem
{

    [global::ProtoBuf.ProtoContract()]
    public partial class ProblemEnvelope : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"type", IsRequired = true)]
        public string Type { get; set; }

        [global::ProtoBuf.ProtoMember(2, IsRequired = true)]
        public SubType subType { get; set; } = SubType.Input;

        [global::ProtoBuf.ProtoMember(3, Name = @"content")]
        public byte[] Content
        {
            get { return __pbn__Content; }
            set { __pbn__Content = value; }
        }
        public bool ShouldSerializeContent() => __pbn__Content != null;
        public void ResetContent() => __pbn__Content = null;
        private byte[] __pbn__Content;

        [global::ProtoBuf.ProtoContract()]
        public enum SubType
        {
            [global::ProtoBuf.ProtoEnum(Name = @"INPUT")]
            Input = 0,
            [global::ProtoBuf.ProtoEnum(Name = @"OUTPUT")]
            Output = 1,
        }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class SolverInfo : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, IsRequired = true)]
        public long unixDateTime { get; set; }

        [global::ProtoBuf.ProtoMember(2, IsRequired = true)]
        public string infoMessage { get; set; }

        [global::ProtoBuf.ProtoMember(3, Name = @"type", IsRequired = true)]
        public SolverMessageType Type { get; set; }

        [global::ProtoBuf.ProtoContract()]
        public enum SolverMessageType
        {
            [global::ProtoBuf.ProtoEnum(Name = @"INFO")]
            Info = 0,
            [global::ProtoBuf.ProtoEnum(Name = @"WARNING")]
            Warning = 1,
            [global::ProtoBuf.ProtoEnum(Name = @"ERROR")]
            Error = 2,
        }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class SolverResponse : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"logs")]
        public global::System.Collections.Generic.List<SolverInfo> Logs { get; } = new global::System.Collections.Generic.List<SolverInfo>();

        [global::ProtoBuf.ProtoMember(2, Name = @"state", IsRequired = true)]
        public SolveState State { get; set; }

        [global::ProtoBuf.ProtoMember(3, Name = @"solution")]
        public byte[] Solution
        {
            get { return __pbn__Solution; }
            set { __pbn__Solution = value; }
        }
        public bool ShouldSerializeSolution() => __pbn__Solution != null;
        public void ResetSolution() => __pbn__Solution = null;
        private byte[] __pbn__Solution;

        [global::ProtoBuf.ProtoContract()]
        public enum SolveState
        {
            [global::ProtoBuf.ProtoEnum(Name = @"WIP")]
            Wip = 0,
            [global::ProtoBuf.ProtoEnum(Name = @"COMPLETED")]
            Completed = 1,
            [global::ProtoBuf.ProtoEnum(Name = @"FAILED")]
            Failed = 2,
        }

    }

}

#pragma warning restore CS1591, CS0612, CS3021, IDE1006
