---
title: "Basic TSP Example (R)"
format:
  html: 
    page-layout: full
    embed-resources: true
    output: ./output/tsp-1-basic.html
    code-copy: true
editor: visual
papersize: a4
execute:
  echo: false
---

This example is for the simple TSP (Traveling Salesman Problem) model. The aim is to visit all points/locations in the dataset in such a way as to minimise the distance.


### Data 

```{r}

data <- read.csv('../sample_data/publist.csv', stringsAsFactors = F)

number_pubs <- nrow(data)

```

The data used in this example is a list of `r number_pubs` pubs in Dublin, Ireland with their associated X and Y coordinates.

```{r}

library("kableExtra")

kable(data, col.names = c("Pub Name (id)",
                           "X-Coordinate (X)",
                           "Y-Coordinate (Y)"))
```


### Running the example
|
The example uses the **iceR** package which will first need to be installed (see information [here](https://github.com/Icepack-co/iceR)) and then loaded.

```{r}
#| echo: true
#| output: false
library(iceR)
```

|
Execute the example as follows:

1. Create an api-helper object with the model type you'd like to solve.

```{r}
#| echo: true
#| output: false
api <- new("apiHelper", modelType = 'tsp-mcvfz472gty6', configFile = '../config.json')
```


2. Create the model and add some data to it.

```{r}
#| echo: true
#| output: false

# Create the model
sr <- new (TSP.SolveRequest)
sr$model <- new (TSP.TSP)

# Load the data
data <- read.csv('../sample_data/publist.csv', stringsAsFactors = F)

# Add the data to the model
sr$model$points <- apply(X = data,
                         MARGIN = 1,
                         FUN = function(i){
                                          g <- new (TSP.Geocode)
                                          g$id <- as.character(i['id'])
                                          g$x <- as.numeric(i['X'])
                                          g$y <- as.numeric(i['Y'])
                                          return(g)
                                        })

# Set the distance type to use the road network
sr$model$distancetype <- 1 # 1 for road network, 2 for euclidean, 3 for haversine

# View the model in plain-text format (string or JSON)
sr$model$toString() %>% cat
sr$model$toJSON() %>% cat

```

3. Submit the model to the API

```{r}
#| echo: true
#| output: false
requestID <- api %>% postSolveRequest(sr)  
```


4. Retrieve the model response

```{r}
#| echo: true
#| output: false
resp <- api %>% getResponse(requestID)
```


5. Visualise the result

```{r}
#| echo: true
#| output: true

# Tabulate the data in native-R format
tab <- resp %>% tabulate(sr)
tab$edges %>% head # just inspect the head of the output

# Plot the data (ggplot or leaflet)
resp %>% plotResponse(sr) # ggplot                       
resp %>% plotResponseLeaflet(sr) # leaflet (if it's mappable)
```

